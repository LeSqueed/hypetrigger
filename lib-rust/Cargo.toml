[package]
name = "hypetrigger"
version = "0.0.1"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[[bin]]
name = "hypetrigger-test"
path = "src/main.rs"

[features]
default = ["tesseract", "tensorflow", "console_error_panic_hook"]
tesseract = ["dep:reqwest", "dep:tesseract"]
tensorflow = ["dep:tensorflow"]
# todo: wasm feature
# todo: photon-rs feature

[dependencies]
photon-rs = "0.3.1"
wasm-bindgen = "0.2.83"
derive_builder = "0.12.0"
open = "3.2.0"
image = "0.23.14" # important to match the version used in `photon-rs`
lazy_static = "1.4.0"
regex = "1.5.5"
reqwest = { version = "0.11.13", optional = true, features = ["blocking"] }
tesseract = { version = "0.12.0", optional = true }
tensorflow = { version = "0.19.1", optional = true }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.1", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.2", optional = true }

[dependencies.web-sys]
version = "0.3"
features = [
  "CanvasRenderingContext2d",
  "ImageData",
  "HtmlCanvasElement",
]
